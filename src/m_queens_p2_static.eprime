language ESSENCE' 1.0

given m : int(1..)

letting FIRST be 0
letting LAST be m-1
letting NO_QUEEN be -1

letting VALUES be domain int(NO_QUEEN..LAST)
letting RANGE be domain int(FIRST..LAST)

$ Ranges for slicing columns
letting LEFT_RANGE be domain int(-LAST..LAST)
letting RIGHT_RANGE be domain int(FIRST..2*LAST)

find numberOfQueens : int(1..m)
find queenColumns : matrix indexed by [RANGE] of VALUES

heuristic static
 
minimising numberOfQueens

such that

  numberOfQueens = sum([ queenColumns[queen] != NO_QUEEN | queen : RANGE ]),

  $ Rows have at most one queen by default.

  $ All columns have at most one queen.
  forAll column : RANGE .
    sum([queenColumns[row] = column | row : RANGE ]) <= 1,

  $ All diagonals have at most one queen, use the same offset for row and column coordinates and make sure they're in the range to get diagonals.
  forAll column : LEFT_RANGE .
    sum([ queenColumns[queen] - queen = column | queen : RANGE, column + queen >= FIRST, column + queen <= LAST ]) <= 1,

  forAll column : RIGHT_RANGE .
    sum([ queenColumns[queen] + queen = column | queen : RANGE, column - queen >= FIRST, column - queen <= LAST ]) <= 1,

  $ All squares have at least one queen in its row, column or diagonal.
  $ Use all possible sign combinations when adding offset to row and column coordinates to get row, column and diagonals.
  forAll row : RANGE .
    forAll column : RANGE .
      sum([ queenColumns[row + sign1 * queen] - sign2 * queen = column |
                  sign1 : int(-1, 0, 1),
                  sign2 : int(-1, 0, 1),
                  queen : RANGE,
                    row + sign1 * queen >= FIRST,
                    row + sign1 * queen <= LAST,
                    column + sign2 * queen >= FIRST,
                    column + sign2 * queen <= LAST,
                    queen != FIRST,
                    sign1 != 0 \/ sign2 != 0 \/ queen = LAST $ add the [row, column] only once.
              ]) >= 1
