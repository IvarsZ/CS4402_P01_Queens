language ESSENCE' 1.0

given m : int(1..)

letting FIRST be 0
letting LAST be m-1
letting NO_QUEEN be -1

letting VALUES be domain int(NO_QUEEN..LAST)
letting RANGE be domain int(FIRST..LAST)

find numberOfQueens : int(1..m)
find queenColumns : matrix indexed by [RANGE] of VALUES 
 
minimising numberOfQueens

such that

  numberOfQueens = sum([ queenColumns[queen] != NO_QUEEN | queen : RANGE ]),

  $ Rows have at most 1 queen by default.

  $ All columns have at most one queen.
  alldifferent_except(queenColumns[..], NO_QUEEN),

  $ All diagonals have at most one queen - for all pairs of queens their squares are not on the same diagonals.
  $ Two squares [r1, c1] and [r2, c2] are on the same diagonal if |r1-r2| = |c1-c2|.
  forAll queen1, queen2 : RANGE .
    (queen1 > queen2) ->
      ( queenColumns[queen1] = NO_QUEEN \/
        queenColumns[queen2] = NO_QUEEN \/
        ( queenColumns[queen1] - queen1 != queenColumns[queen2] - queen2 /\
          queenColumns[queen1] + queen1 != queenColumns[queen2] + queen2) ),

  $ The rows that don't have a queen are attacked by a column or diagonal.
  forAll row : RANGE .
    (queenColumns[row] = NO_QUEEN) -> 
    (
      forAll column : RANGE .
        exists queen : RANGE .
          (queenColumns[queen] != NO_QUEEN) /\
          (queenColumns[queen] = column \/ |queenColumns[queen] - column| = |queen - row|)
    )
